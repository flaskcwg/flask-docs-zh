# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-25 19:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <withlihui@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../testing.rst:2
msgid "Testing Flask Applications"
msgstr ""

#: ../../testing.rst:4
msgid "**Something that is untested is broken.**"
msgstr ""

#: ../../testing.rst:6
msgid ""
"The origin of this quote is unknown and while it is not entirely correct,"
" it is also not far from the truth.  Untested applications make it hard "
"to improve existing code and developers of untested applications tend to "
"become pretty paranoid.  If an application has automated tests, you can "
"safely make changes and instantly know if anything breaks."
msgstr ""

#: ../../testing.rst:12
msgid ""
"Flask provides a way to test your application by exposing the Werkzeug "
"test :class:`~werkzeug.test.Client` and handling the context locals for "
"you. You can then use that with your favourite testing solution."
msgstr ""

#: ../../testing.rst:16
msgid ""
"In this documentation we will use the `pytest`_ package as the base "
"framework for our tests. You can install it with ``pip``, like so::"
msgstr ""

#: ../../testing.rst:24
msgid "The Application"
msgstr ""

#: ../../testing.rst:26
msgid ""
"First, we need an application to test; we will use the application from "
"the :doc:`tutorial/index`. If you don't have that application yet, get "
"the source code from :gh:`the examples <examples/tutorial>`."
msgstr ""

#: ../../testing.rst:30
msgid ""
"So that we can import the module ``flaskr`` correctly, we need to run "
"``pip install -e .`` in the folder ``tutorial``."
msgstr ""

#: ../../testing.rst:34
msgid "The Testing Skeleton"
msgstr ""

#: ../../testing.rst:36
msgid ""
"We begin by adding a tests directory under the application root.  Then "
"create a Python file to store our tests (:file:`test_flaskr.py`). When we"
" format the filename like ``test_*.py``, it will be auto-discoverable by "
"pytest."
msgstr ""

#: ../../testing.rst:41
msgid ""
"Next, we create a `pytest fixture`_ called :func:`client` that configures"
" the application for testing and initializes a new database::"
msgstr ""

#: ../../testing.rst:66
msgid ""
"This client fixture will be called by each individual test.  It gives us "
"a simple interface to the application, where we can trigger test requests"
" to the application.  The client will also keep track of cookies for us."
msgstr ""

#: ../../testing.rst:70
msgid ""
"During setup, the ``TESTING`` config flag is activated.  What this does "
"is disable error catching during request handling, so that you get better"
" error reports when performing test requests against the application."
msgstr ""

#: ../../testing.rst:75
msgid ""
"Because SQLite3 is filesystem-based, we can easily use the "
":mod:`tempfile` module to create a temporary database and initialize it. "
"The :func:`~tempfile.mkstemp` function does two things for us: it returns"
" a low-level file handle and a random file name, the latter we use as "
"database name.  We just have to keep the `db_fd` around so that we can "
"use the :func:`os.close` function to close the file."
msgstr ""

#: ../../testing.rst:82
msgid ""
"To delete the database after the test, the fixture closes the file and "
"removes it from the filesystem."
msgstr ""

#: ../../testing.rst:85
msgid "If we now run the test suite, we should see the following output::"
msgstr ""

#: ../../testing.rst:95
msgid ""
"Even though it did not run any actual tests, we already know that our "
"``flaskr`` application is syntactically valid, otherwise the import would"
" have died with an exception."
msgstr ""

#: ../../testing.rst:103
msgid "The First Test"
msgstr ""

#: ../../testing.rst:105
msgid ""
"Now it's time to start testing the functionality of the application. "
"Let's check that the application shows \"No entries here so far\" if we "
"access the root of the application (``/``).  To do this, we add a new "
"test function to :file:`test_flaskr.py`, like this::"
msgstr ""

#: ../../testing.rst:116
msgid ""
"Notice that our test functions begin with the word `test`; this allows "
"`pytest`_ to automatically identify the function as a test to run."
msgstr ""

#: ../../testing.rst:119
msgid ""
"By using ``client.get`` we can send an HTTP ``GET`` request to the "
"application with the given path.  The return value will be a "
":class:`~flask.Flask.response_class` object. We can now use the "
":attr:`~werkzeug.wrappers.Response.data` attribute to inspect the return "
"value (as string) from the application. In this case, we ensure that "
"``'No entries here so far'`` is part of the output."
msgstr ""

#: ../../testing.rst:127
msgid "Run it again and you should see one passing test::"
msgstr ""

#: ../../testing.rst:140
msgid "Logging In and Out"
msgstr ""

#: ../../testing.rst:142
msgid ""
"The majority of the functionality of our application is only available "
"for the administrative user, so we need a way to log our test client in "
"and out of the application.  To do this, we fire some requests to the "
"login and logout pages with the required form data (username and "
"password).  And because the login and logout pages redirect, we tell the "
"client to `follow_redirects`."
msgstr ""

#: ../../testing.rst:148
msgid "Add the following two functions to your :file:`test_flaskr.py` file::"
msgstr ""

#: ../../testing.rst:160
msgid ""
"Now we can easily test that logging in and out works and that it fails "
"with invalid credentials.  Add this new test function::"
msgstr ""

#: ../../testing.rst:182
msgid "Test Adding Messages"
msgstr ""

#: ../../testing.rst:184
msgid ""
"We should also test that adding messages works.  Add a new test function "
"like this::"
msgstr ""

#: ../../testing.rst:199
msgid ""
"Here we check that HTML is allowed in the text but not in the title, "
"which is the intended behavior."
msgstr ""

#: ../../testing.rst:202
msgid "Running that should now give us three passing tests::"
msgstr ""

#: ../../testing.rst:218
msgid "Other Testing Tricks"
msgstr ""

#: ../../testing.rst:220
msgid ""
"Besides using the test client as shown above, there is also the "
":meth:`~flask.Flask.test_request_context` method that can be used in "
"combination with the ``with`` statement to activate a request context "
"temporarily.  With this you can access the :class:`~flask.request`, "
":class:`~flask.g` and :class:`~flask.session` objects like in view "
"functions.  Here is a full example that demonstrates this approach::"
msgstr ""

#: ../../testing.rst:235
msgid "All the other objects that are context bound can be used in the same way."
msgstr ""

#: ../../testing.rst:238
msgid ""
"If you want to test your application with different configurations and "
"there does not seem to be a good way to do that, consider switching to "
"application factories (see :doc:`patterns/appfactories`)."
msgstr ""

#: ../../testing.rst:242
msgid ""
"Note however that if you are using a test request context, the "
":meth:`~flask.Flask.before_request` and "
":meth:`~flask.Flask.after_request` functions are not called "
"automatically.  However :meth:`~flask.Flask.teardown_request` functions "
"are indeed executed when the test request context leaves the ``with`` "
"block.  If you do want the :meth:`~flask.Flask.before_request` functions "
"to be called as well, you need to call "
":meth:`~flask.Flask.preprocess_request` yourself::"
msgstr ""

#: ../../testing.rst:256
msgid ""
"This can be necessary to open database connections or something similar "
"depending on how your application was designed."
msgstr ""

#: ../../testing.rst:259
msgid ""
"If you want to call the :meth:`~flask.Flask.after_request` functions you "
"need to call into :meth:`~flask.Flask.process_response` which however "
"requires that you pass it a response object::"
msgstr ""

#: ../../testing.rst:270
msgid ""
"This in general is less useful because at that point you can directly "
"start using the test client."
msgstr ""

#: ../../testing.rst:276
msgid "Faking Resources and Context"
msgstr ""

#: ../../testing.rst:280
msgid ""
"A very common pattern is to store user authorization information and "
"database connections on the application context or the :attr:`flask.g` "
"object.  The general pattern for this is to put the object on there on "
"first usage and then to remove it on a teardown.  Imagine for instance "
"this code to get the current user::"
msgstr ""

#: ../../testing.rst:293
msgid ""
"For a test it would be nice to override this user from the outside "
"without having to change some code.  This can be accomplished with "
"hooking the :data:`flask.appcontext_pushed` signal::"
msgstr ""

#: ../../testing.rst:307
msgid "And then to use it::"
msgstr ""

#: ../../testing.rst:323
msgid "Keeping the Context Around"
msgstr ""

#: ../../testing.rst:327
msgid ""
"Sometimes it is helpful to trigger a regular request but still keep the "
"context around for a little longer so that additional introspection can "
"happen.  With Flask 0.4 this is possible by using the "
":meth:`~flask.Flask.test_client` with a ``with`` block::"
msgstr ""

#: ../../testing.rst:338
msgid ""
"If you were to use just the :meth:`~flask.Flask.test_client` without the "
"``with`` block, the ``assert`` would fail with an error because `request`"
" is no longer available (because you are trying to use it outside of the "
"actual request)."
msgstr ""

#: ../../testing.rst:345
msgid "Accessing and Modifying Sessions"
msgstr ""

#: ../../testing.rst:349
msgid ""
"Sometimes it can be very helpful to access or modify the sessions from "
"the test client.  Generally there are two ways for this.  If you just "
"want to ensure that a session has certain keys set to certain values you "
"can just keep the context around and access :data:`flask.session`::"
msgstr ""

#: ../../testing.rst:358
msgid ""
"This however does not make it possible to also modify the session or to "
"access the session before a request was fired.  Starting with Flask 0.8 "
"we provide a so called “session transaction” which simulates the "
"appropriate calls to open a session in the context of the test client and"
" to modify it. At the end of the transaction the session is stored and "
"ready to be used by the test client. This works independently of the "
"session backend used::"
msgstr ""

#: ../../testing.rst:372
msgid ""
"Note that in this case you have to use the ``sess`` object instead of the"
" :data:`flask.session` proxy.  The object however itself will provide the"
" same interface."
msgstr ""

#: ../../testing.rst:378
msgid "Testing JSON APIs"
msgstr ""

#: ../../testing.rst:382
msgid ""
"Flask has great support for JSON, and is a popular choice for building "
"JSON APIs. Making requests with JSON data and examining JSON data in "
"responses is very convenient::"
msgstr ""

#: ../../testing.rst:402
msgid ""
"Passing the ``json`` argument in the test client methods sets the request"
" data to the JSON-serialized object and sets the content type to "
"``application/json``. You can get the JSON data from the request or "
"response with ``get_json``."
msgstr ""

#: ../../testing.rst:411
msgid "Testing CLI Commands"
msgstr ""

#: ../../testing.rst:413
msgid ""
"Click comes with `utilities for testing`_ your CLI commands. A "
":class:`~click.testing.CliRunner` runs commands in isolation and captures"
" the output in a :class:`~click.testing.Result` object."
msgstr ""

#: ../../testing.rst:417
msgid ""
"Flask provides :meth:`~flask.Flask.test_cli_runner` to create a "
":class:`~flask.testing.FlaskCliRunner` that passes the Flask app to the "
"CLI automatically. Use its :meth:`~flask.testing.FlaskCliRunner.invoke` "
"method to call commands in the same way they would be called from the "
"command line. ::"
msgstr ""

#: ../../testing.rst:441
msgid ""
"In the example above, invoking the command by name is useful because it "
"verifies that the command was correctly registered with the app."
msgstr ""

#: ../../testing.rst:444
msgid ""
"If you want to test how your command parses parameters, without running "
"the command, use its :meth:`~click.BaseCommand.make_context` method. This"
" is useful for testing complex validation rules and custom types. ::"
msgstr ""
