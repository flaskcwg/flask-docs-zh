# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-25 19:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <withlihui@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../deploying/wsgi-standalone.rst:2
msgid "Standalone WSGI Containers"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:4
msgid ""
"There are popular servers written in Python that contain WSGI "
"applications and serve HTTP.  These servers stand alone when they run; "
"you can proxy to them from your web server.  Note the section on :ref"
":`deploying-proxy-setups` if you run into issues."
msgstr ""

#: ../../deploying/wsgi-standalone.rst:10
msgid "Gunicorn"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:12
msgid ""
"`Gunicorn`_ 'Green Unicorn' is a WSGI HTTP Server for UNIX. It's a pre-"
"fork worker model ported from Ruby's Unicorn project. It supports both "
"`eventlet`_ and `greenlet`_. Running a Flask application on this server "
"is quite simple::"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:18
msgid ""
"`Gunicorn`_ provides many command-line options -- see ``gunicorn -h``. "
"For example, to run a Flask application with 4 worker processes (``-w "
"4``) binding to localhost port 4000 (``-b 127.0.0.1:4000``)::"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:24
msgid ""
"The ``gunicorn`` command expects the names of your application module or "
"package and the application instance within the module. If you use the "
"application factory pattern, you can pass a call to that::"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:35
msgid "uWSGI"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:37
msgid ""
"`uWSGI`_ is a fast application server written in C. It is very "
"configurable which makes it more complicated to setup than gunicorn."
msgstr ""

#: ../../deploying/wsgi-standalone.rst:40
msgid "Running `uWSGI HTTP Router`_::"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:44
msgid ""
"For a more optimized setup, see :doc:`configuring uWSGI and NGINX "
"<uwsgi>`."
msgstr ""

#: ../../deploying/wsgi-standalone.rst:50
msgid "Gevent"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:52
msgid ""
"`Gevent`_ is a coroutine-based Python networking library that uses "
"`greenlet`_ to provide a high-level synchronous API on top of `libev`_ "
"event loop::"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:67
msgid "Twisted Web"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:69
msgid ""
"`Twisted Web`_ is the web server shipped with `Twisted`_, a mature, non-"
"blocking event-driven networking library. Twisted Web comes with a "
"standard WSGI container which can be controlled from the command line "
"using the ``twistd`` utility::"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:76
msgid ""
"This example will run a Flask application called ``app`` from a module "
"named ``myproject``."
msgstr ""

#: ../../deploying/wsgi-standalone.rst:79
msgid ""
"Twisted Web supports many flags and options, and the ``twistd`` utility "
"does as well; see ``twistd -h`` and ``twistd web -h`` for more "
"information. For example, to run a Twisted Web server in the foreground, "
"on port 8080, with an application from ``myproject``::"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:92
msgid "Proxy Setups"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:94
msgid ""
"If you deploy your application using one of these servers behind an HTTP "
"proxy you will need to rewrite a few headers in order for the application"
" to work. The two problematic values in the WSGI environment usually are "
"``REMOTE_ADDR`` and ``HTTP_HOST``.  You can configure your httpd to pass "
"these headers, or you can fix them in middleware.  Werkzeug ships a fixer"
" that will solve some common setups, but you might want to write your own"
" WSGI middleware for specific setups."
msgstr ""

#: ../../deploying/wsgi-standalone.rst:102
msgid ""
"Here's a simple nginx configuration which proxies to an application "
"served on localhost at port 8000, setting appropriate headers:"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:126
msgid ""
"If your httpd is not providing these headers, the most common setup "
"invokes the host being set from ``X-Forwarded-Host`` and the remote "
"address from ``X-Forwarded-For``::"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:133
msgid "Trusting Headers"
msgstr ""

#: ../../deploying/wsgi-standalone.rst:135
msgid ""
"Please keep in mind that it is a security issue to use such a middleware "
"in a non-proxy setup because it will blindly trust the incoming headers "
"which might be forged by malicious clients."
msgstr ""

#: ../../deploying/wsgi-standalone.rst:139
msgid ""
"If you want to rewrite the headers from another header, you might want to"
" use a fixer like this::"
msgstr ""
