# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-25 19:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <withlihui@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../signals.rst:2
msgid "Signals"
msgstr ""

#: ../../signals.rst:6
msgid ""
"Starting with Flask 0.6, there is integrated support for signalling in "
"Flask.  This support is provided by the excellent `blinker`_ library and "
"will gracefully fall back if it is not available."
msgstr ""

#: ../../signals.rst:10
msgid ""
"What are signals?  Signals help you decouple applications by sending "
"notifications when actions occur elsewhere in the core framework or "
"another Flask extensions.  In short, signals allow certain senders to "
"notify subscribers that something happened."
msgstr ""

#: ../../signals.rst:15
msgid ""
"Flask comes with a couple of signals and other extensions might provide "
"more.  Also keep in mind that signals are intended to notify subscribers "
"and should not encourage subscribers to modify data.  You will notice "
"that there are signals that appear to do the same thing like some of the "
"builtin decorators do (eg: :data:`~flask.request_started` is very similar"
" to :meth:`~flask.Flask.before_request`).  However, there are differences"
" in how they work.  The core :meth:`~flask.Flask.before_request` handler,"
" for example, is executed in a specific order and is able to abort the "
"request early by returning a response.  In contrast all signal handlers "
"are executed in undefined order and do not modify any data."
msgstr ""

#: ../../signals.rst:26
msgid ""
"The big advantage of signals over handlers is that you can safely "
"subscribe to them for just a split second.  These temporary subscriptions"
" are helpful for unit testing for example.  Say you want to know what "
"templates were rendered as part of a request: signals allow you to do "
"exactly that."
msgstr ""

#: ../../signals.rst:33
msgid "Subscribing to Signals"
msgstr ""

#: ../../signals.rst:35
msgid ""
"To subscribe to a signal, you can use the "
":meth:`~blinker.base.Signal.connect` method of a signal.  The first "
"argument is the function that should be called when the signal is "
"emitted, the optional second argument specifies a sender.  To unsubscribe"
" from a signal, you can use the :meth:`~blinker.base.Signal.disconnect` "
"method."
msgstr ""

#: ../../signals.rst:41
msgid ""
"For all core Flask signals, the sender is the application that issued the"
" signal.  When you subscribe to a signal, be sure to also provide a "
"sender unless you really want to listen for signals from all "
"applications.  This is especially true if you are developing an "
"extension."
msgstr ""

#: ../../signals.rst:46
msgid ""
"For example, here is a helper context manager that can be used in a unit "
"test to determine which templates were rendered and what variables were "
"passed to the template::"
msgstr ""

#: ../../signals.rst:64
msgid "This can now easily be paired with a test client::"
msgstr ""

#: ../../signals.rst:74
msgid ""
"Make sure to subscribe with an extra ``**extra`` argument so that your "
"calls don't fail if Flask introduces new arguments to the signals."
msgstr ""

#: ../../signals.rst:77
msgid ""
"All the template rendering in the code issued by the application `app` in"
" the body of the ``with`` block will now be recorded in the `templates` "
"variable.  Whenever a template is rendered, the template object as well "
"as context are appended to it."
msgstr ""

#: ../../signals.rst:82
msgid ""
"Additionally there is a convenient helper method "
"(:meth:`~blinker.base.Signal.connected_to`)  that allows you to "
"temporarily subscribe a function to a signal with a context manager on "
"its own.  Because the return value of the context manager cannot be "
"specified that way, you have to pass the list in as an argument::"
msgstr ""

#: ../../signals.rst:95
msgid "The example above would then look like this::"
msgstr ""

#: ../../signals.rst:102
msgid "Blinker API Changes"
msgstr ""

#: ../../signals.rst:104
msgid ""
"The :meth:`~blinker.base.Signal.connected_to` method arrived in Blinker "
"with version 1.1."
msgstr ""

#: ../../signals.rst:108
msgid "Creating Signals"
msgstr ""

#: ../../signals.rst:110
msgid ""
"If you want to use signals in your own application, you can use the "
"blinker library directly.  The most common use case are named signals in "
"a custom :class:`~blinker.base.Namespace`..  This is what is recommended "
"most of the time::"
msgstr ""

#: ../../signals.rst:118
msgid "Now you can create new signals like this::"
msgstr ""

#: ../../signals.rst:122
msgid ""
"The name for the signal here makes it unique and also simplifies "
"debugging.  You can access the name of the signal with the "
":attr:`~blinker.base.NamedSignal.name` attribute."
msgstr ""

#: ../../signals.rst:126
msgid "For Extension Developers"
msgstr ""

#: ../../signals.rst:128
msgid ""
"If you are writing a Flask extension and you want to gracefully degrade "
"for missing blinker installations, you can do so by using the "
":class:`flask.signals.Namespace` class."
msgstr ""

#: ../../signals.rst:135
msgid "Sending Signals"
msgstr ""

#: ../../signals.rst:137
msgid ""
"If you want to emit a signal, you can do so by calling the "
":meth:`~blinker.base.Signal.send` method.  It accepts a sender as first "
"argument and optionally some keyword arguments that are forwarded to the "
"signal subscribers::"
msgstr ""

#: ../../signals.rst:148
msgid ""
"Try to always pick a good sender.  If you have a class that is emitting a"
" signal, pass ``self`` as sender.  If you are emitting a signal from a "
"random function, you can pass ``current_app._get_current_object()`` as "
"sender."
msgstr ""

#: ../../signals.rst:152
msgid "Passing Proxies as Senders"
msgstr ""

#: ../../signals.rst:154
msgid ""
"Never pass :data:`~flask.current_app` as sender to a signal.  Use "
"``current_app._get_current_object()`` instead.  The reason for this is "
"that :data:`~flask.current_app` is a proxy and not the real application "
"object."
msgstr ""

#: ../../signals.rst:161
msgid "Signals and Flask's Request Context"
msgstr ""

#: ../../signals.rst:163
msgid ""
"Signals fully support :doc:`reqcontext` when receiving signals. Context-"
"local variables are consistently available between "
":data:`~flask.request_started` and :data:`~flask.request_finished`, so "
"you can rely on :class:`flask.g` and others as needed.  Note the "
"limitations described in :ref:`signals-sending` and the "
":data:`~flask.request_tearing_down` signal."
msgstr ""

#: ../../signals.rst:171
msgid "Decorator Based Signal Subscriptions"
msgstr ""

#: ../../signals.rst:173
msgid ""
"With Blinker 1.1 you can also easily subscribe to signals by using the "
"new :meth:`~blinker.base.NamedSignal.connect_via` decorator::"
msgstr ""

#: ../../signals.rst:183
msgid "Core Signals"
msgstr ""

#: ../../signals.rst:185
msgid "Take a look at :ref:`core-signals-list` for a list of all builtin signals."
msgstr ""
