# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# Grey Li <withlihui@gmail.com>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-25 19:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Grey Li <withlihui@gmail.com>\n"
"Language-Team: zh_CN <withlihui@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../tutorial/tests.rst:4
msgid "Test Coverage"
msgstr "测试覆盖率"

#: ../../tutorial/tests.rst:6
msgid ""
"Writing unit tests for your application lets you check that the code you "
"wrote works the way you expect. Flask provides a test client that "
"simulates requests to the application and returns the response data."
msgstr ""
"为你的应用编写单元测试可以让你检查你写的代码是否按照预期的方式工作。Flask 提供了一个测试"
"客户端，可以用来模拟发送到应用的请求并返回响应数据。"

#: ../../tutorial/tests.rst:10
msgid ""
"You should test as much of your code as possible. Code in functions only "
"runs when the function is called, and code in branches, such as ``if`` "
"blocks, only runs when the condition is met. You want to make sure that "
"each function is tested with data that covers each branch."
msgstr ""
"你应该测试尽可能多的代码。函数里的代码只会在函数被调用时运行，而分支里的代码，比如 ``if`` "
"块，只会在条件满足时运行。你要确保每一个函数都使用覆盖每一个分支的数据进行测试。"

#: ../../tutorial/tests.rst:15
#, python-format
msgid ""
"The closer you get to 100% coverage, the more comfortable you can be that"
" making a change won't unexpectedly change other behavior. However, 100% "
"coverage doesn't guarantee that your application doesn't have bugs. In "
"particular, it doesn't test how the user interacts with the application "
"in the browser. Despite this, test coverage is an important tool to use "
"during development."
msgstr ""
"你越接近 100% 覆盖率，你就越能确信对应用做出一个改动时不会意外地改变其他行为。然而，100% "
"的覆盖率并不能保证你的应用没有错误。尤其是，它没有测试用户如何在浏览器里与应用进"
"行交互。尽管如此，测试覆盖率是一个在开发中使用的重要工具。"

#: ../../tutorial/tests.rst:23
msgid ""
"This is being introduced late in the tutorial, but in your future "
"projects you should test as you develop."
msgstr "这部分在教程的后面被引入，但是在未来的项目里你应该在开发时同步进行测试。"

#: ../../tutorial/tests.rst:26
msgid ""
"You'll use `pytest`_ and `coverage`_ to test and measure your code. "
"Install them both:"
msgstr "你将使用 `pytest`_ 和 `coverage`_ 来测试你的代码，并评估测试覆盖率。安装它们："

#: ../../tutorial/tests.rst:38
msgid "Setup and Fixtures"
msgstr "设置（setup）和固件（fixture）"

#: ../../tutorial/tests.rst:40
msgid ""
"The test code is located in the ``tests`` directory. This directory is "
"*next to* the ``flaskr`` package, not inside it. The "
"``tests/conftest.py`` file contains setup functions called *fixtures* "
"that each test will use. Tests are in Python modules that start with "
"``test_``, and each test function in those modules also starts with "
"``test_``."
msgstr ""
"测试代码位于 ``tests`` 目录中。这个目录与 ``flaskr`` 包 *同级*，而不是在它里面。"
"``tests/conftest.py`` 文件包含每一个测试都会使用的叫做 *fixtures（固件）* 的设置"
"函数。测试在名称以 ``test_`` 开头的 Python 模块中，而且这些模块中的每一个测试函数的名称"
"也以 ``test_`` 开头。"

#: ../../tutorial/tests.rst:47
msgid ""
"Each test will create a new temporary database file and populate some "
"data that will be used in the tests. Write a SQL file to insert that "
"data."
msgstr ""
"每一个测试都会创建一个新的临时数据库文件，并填充一些将在测试中使用的数据。写一个 SQL "
"文件来插入那些数据。"

#: ../../tutorial/tests.rst:51
msgid "``tests/data.sql``"
msgstr "``tests/data.sql``"

#: ../../tutorial/tests.rst:63
msgid ""
"The ``app`` fixture will call the factory and pass ``test_config`` to "
"configure the application and database for testing instead of using your "
"local development configuration."
msgstr ""
"``app`` 固件（fixture）会调用应用工厂并传入 ``test_config`` 来配置应用和数据库，"
"以便使用测试配置而不是你的本地开发配置。"

#: ../../tutorial/tests.rst:67 ../../tutorial/tests.rst:226
msgid "``tests/conftest.py``"
msgstr "``tests/conftest.py``"

#: ../../tutorial/tests.rst:109
msgid ""
":func:`tempfile.mkstemp` creates and opens a temporary file, returning "
"the file descriptor and the path to it. The ``DATABASE`` path is "
"overridden so it points to this temporary path instead of the instance "
"folder. After setting the path, the database tables are created and the "
"test data is inserted. After the test is over, the temporary file is "
"closed and removed."
msgstr ""
":func:`tempfile.mkstemp` 创建并打开一个临时文件，返回文件描述符和指向它的路径。"
"``DATABASE`` 路径被重写所以它指向这个临时路径而不是实例文件夹。设置好路径以后，数据库"
"表被创建，而且测试数据会被插入。测试结束以后，临时文件夹会被关闭并删除。"

#: ../../tutorial/tests.rst:116
msgid ""
":data:`TESTING` tells Flask that the app is in test mode. Flask changes "
"some internal behavior so it's easier to test, and other extensions can "
"also use the flag to make testing them easier."
msgstr ""
":data:`TESTING` 告诉 Flask 应用处于测试模式。Flask 改变了一些内部行为，所以测试会更容"
"易，而且其他扩展也可以使用这个标志让测试它们更容易。"

#: ../../tutorial/tests.rst:120
msgid ""
"The ``client`` fixture calls :meth:`app.test_client() "
"<Flask.test_client>` with the application object created by the ``app`` "
"fixture. Tests will use the client to make requests to the application "
"without running the server."
msgstr ""
"``client`` 固件使用 ``app`` 固件创建的应用对象调用 "
":meth:`app.test_client() <Flask.test_client>`。测试将使用这个客户端来发送请求"
"到应用，不用运行服务器。"

#: ../../tutorial/tests.rst:125
msgid ""
"The ``runner`` fixture is similar to ``client``. "
":meth:`app.test_cli_runner() <Flask.test_cli_runner>` creates a runner "
"that can call the Click commands registered with the application."
msgstr ""
"``runner`` 固件和 ``client`` 类似。:meth:`app.test_cli_runner() <Flask.test_cli_runner>` "
"创建一个运行器，它可以用来调用注册到应用的 Click 命令。"

#: ../../tutorial/tests.rst:129
msgid ""
"Pytest uses fixtures by matching their function names with the names of "
"arguments in the test functions. For example, the ``test_hello`` function"
" you'll write next takes a ``client`` argument. Pytest matches that with "
"the ``client`` fixture function, calls it, and passes the returned value "
"to the test function."
msgstr ""
"pytest 通过匹配固件的函数名称和测试函数中的参数名称来使用固件。举例来说，你接下来要写的 "
"``test_hello`` 函数接受一个 ``client`` 参数。pytest 通过参数名匹配到 ``client`` "
"固件函数，调用它，然后传递返回值到测试函数。"

#: ../../tutorial/tests.rst:137
msgid "Factory"
msgstr "应用工厂"

#: ../../tutorial/tests.rst:139
msgid ""
"There's not much to test about the factory itself. Most of the code will "
"be executed for each test already, so if something fails the other tests "
"will notice."
msgstr ""
"应用工厂本身没有什么可以测试。大多数的代码已经被每一个测试执行了，所以如果有什么地方测试失败"
"了，其他的测试会注意到。"

#: ../../tutorial/tests.rst:143
msgid ""
"The only behavior that can change is passing test config. If config is "
"not passed, there should be some default configuration, otherwise the "
"configuration should be overridden."
msgstr ""
"唯一可以改变的行为是传递测试配置。如果配置没有被传递，应该有一些默认配置，否则配置应该"
"被重写。"

#: ../../tutorial/tests.rst:147
msgid "``tests/test_factory.py``"
msgstr "``tests/test_factory.py``"

#: ../../tutorial/tests.rst:162
msgid ""
"You added the ``hello`` route as an example when writing the factory at "
"the beginning of the tutorial. It returns \"Hello, World!\", so the test "
"checks that the response data matches."
msgstr ""
"在教程的一开始，你在编写应用工厂时添加了 ``hello`` 路由作为一个示例。它返回“Hello, World!”，"
"所以测试检查响应数据是否匹配。"

#: ../../tutorial/tests.rst:168
msgid "Database"
msgstr "数据库"

#: ../../tutorial/tests.rst:170
msgid ""
"Within an application context, ``get_db`` should return the same "
"connection each time it's called. After the context, the connection "
"should be closed."
msgstr ""
"在一个应用上下文内，``get_db`` 每次被调用时都应该返回相同的连接。在上下文之后，"
"连接应该被关闭。"

#: ../../tutorial/tests.rst:174 ../../tutorial/tests.rst:196
msgid "``tests/test_db.py``"
msgstr "``tests/test_db.py``"

#: ../../tutorial/tests.rst:193
msgid ""
"The ``init-db`` command should call the ``init_db`` function and output a"
" message."
msgstr "``init-db`` 命令应该调用 ``init_db`` 函数并输出一条消息。"

#: ../../tutorial/tests.rst:211
msgid ""
"This test uses Pytest's ``monkeypatch`` fixture to replace the "
"``init_db`` function with one that records that it's been called. The "
"``runner`` fixture you wrote above is used to call the ``init-db`` "
"command by name."
msgstr ""
"这个测试使用 pytest 的 ``monkeypatch`` 固件来把 ``init_db`` 函数替换为记录它"
"已经被调用的函数。你在上面写的 ``runner`` 固件用来使用名字调用 ``init-db`` 命令。"

#: ../../tutorial/tests.rst:218
msgid "Authentication"
msgstr "认证"

#: ../../tutorial/tests.rst:220
msgid ""
"For most of the views, a user needs to be logged in. The easiest way to "
"do this in tests is to make a ``POST`` request to the ``login`` view with"
" the client. Rather than writing that out every time, you can write a "
"class with methods to do that, and use a fixture to pass it the client "
"for each test."
msgstr ""
"对于大多数视图，用户需要登录才能访问。在测试中实现登录最简单的方式是用客户端发出一个 "
"``POST`` 请求到 ``login`` 视图。与其每次都写出来，不如写一个类，在方法里实现这些逻辑"
"，然后为它们创建一个固件，并传递 ``client`` 固件给它。"

#: ../../tutorial/tests.rst:247
msgid ""
"With the ``auth`` fixture, you can call ``auth.login()`` in a test to log"
" in as the ``test`` user, which was inserted as part of the test data in "
"the ``app`` fixture."
msgstr ""
"借助 ``auth`` 固件，你可以在一个测试中调用 ``auth.login()``，以 ``test`` 用户的身份"
"登录，它被作为测试数据的一部分在 ``app`` 固件中被插入。"

#: ../../tutorial/tests.rst:251
msgid ""
"The ``register`` view should render successfully on ``GET``. On ``POST`` "
"with valid form data, it should redirect to the login URL and the user's "
"data should be in the database. Invalid data should display error "
"messages."
msgstr ""
"``register`` 视图应该在 ``GET`` 请求发来时成功渲染。当携带有效表单数据的 ``POST`` 请"
"求发来时，它应该重定向到登录 URL，而且用户的数据应该在数据库中。无效的数据应该显示错误消息。"

#: ../../tutorial/tests.rst:256 ../../tutorial/tests.rst:316
#: ../../tutorial/tests.rst:345
msgid "``tests/test_auth.py``"
msgstr "``tests/test_auth.py``"

#: ../../tutorial/tests.rst:289
msgid ""
":meth:`client.get() <werkzeug.test.Client.get>` makes a ``GET`` request "
"and returns the :class:`Response` object returned by Flask. Similarly, "
":meth:`client.post() <werkzeug.test.Client.post>` makes a ``POST`` "
"request, converting the ``data`` dict into form data."
msgstr ""
":meth:`client.get() <werkzeug.test.Client.get>` 发送一个 ``GET`` 请求并返回"
"由 Flask 返回的 :class:`Response` 对象。类似地，:meth:`client.post() <werkzeug.test.Client.post>` "
"发送一个 ``POST`` 请求，转换 ``data`` 字典到表单数据里。"

#: ../../tutorial/tests.rst:294
msgid ""
"To test that the page renders successfully, a simple request is made and "
"checked for a ``200 OK`` :attr:`~Response.status_code`. If rendering "
"failed, Flask would return a ``500 Internal Server Error`` code."
msgstr ""
"为了测试页面是否成功渲染，这里发送了一个简单的请求并检查是否有 ``200 OK`` "
":attr:`~Response.status_code`。如果渲染失败，Flask 会返回一个 "
"``500 Internal Server Error`` 状态码。"

#: ../../tutorial/tests.rst:299
msgid ""
":attr:`~Response.headers` will have a ``Location`` header with the login "
"URL when the register view redirects to the login view."
msgstr ""
"当 ``register`` 视图重定向到 ``login`` 视图时，:attr:`~Response.headers` 会有一"
"个带有登录 URL 的 ``Location`` 首部（Header）。"

#: ../../tutorial/tests.rst:302
msgid ""
":attr:`~Response.data` contains the body of the response as bytes. If you"
" expect a certain value to render on the page, check that it's in "
"``data``. Bytes must be compared to bytes. If you want to compare text, "
"use :meth:`get_data(as_text=True) <werkzeug.wrappers.Response.get_data>` "
"instead."
msgstr ""
":attr:`~Response.data` 包含字节格式的响应体。如果你期待页面上有一个特定的值被渲染，"
"检查它是否在 ``data`` 里。字节必须和字节对比。如果你想要对比文本，则使用 "
":meth:`get_data(as_text=True) <werkzeug.wrappers.Response.get_data>`。"

#: ../../tutorial/tests.rst:308
msgid ""
"``pytest.mark.parametrize`` tells Pytest to run the same test function "
"with different arguments. You use it here to test different invalid input"
" and error messages without writing the same code three times."
msgstr ""
"``pytest.mark.parametrize`` 告诉 pytest 使用不同的参数运行相同的测试函数。在这里"
"你使用它来测试不同的无效输入和错误消息，而不用重复写三次相同的代码。"

#: ../../tutorial/tests.rst:312
msgid ""
"The tests for the ``login`` view are very similar to those for "
"``register``. Rather than testing the data in the database, "
":data:`session` should have ``user_id`` set after logging in."
msgstr ""
"``login`` 视图的测试和 ``register`` 视图的测试非常相似。后者是测试数据库中"
"的数据，前者是测试 :data:`session` 应该在登录后设置好 ``user_id``。"

#: ../../tutorial/tests.rst:338
msgid ""
"Using ``client`` in a ``with`` block allows accessing context variables "
"such as :data:`session` after the response is returned. Normally, "
"accessing ``session`` outside of a request would raise an error."
msgstr ""
"在 ``with`` 块中使用 ``client`` 允许你在响应返回后访问上下文变量，如 :data:`session`。"
"通常情况下，在请求之外访问 ``session`` 会抛出错误。"

#: ../../tutorial/tests.rst:342
msgid ""
"Testing ``logout`` is the opposite of ``login``. :data:`session` should "
"not contain ``user_id`` after logging out."
msgstr ""
"测试 ``logout`` 和 ``login`` 相反。:data:`session` 在登出后不应该包含 ``user_id``。"

#: ../../tutorial/tests.rst:357
msgid "Blog"
msgstr "博客"

#: ../../tutorial/tests.rst:359
msgid ""
"All the blog views use the ``auth`` fixture you wrote earlier. Call "
"``auth.login()`` and subsequent requests from the client will be logged "
"in as the ``test`` user."
msgstr ""
"所有的博客视图都使用了你之前编写 ``auth`` 固件。它们会调用 ``auth.login()``，并且"
"从客户端发送后续的请求都将会作为 ``test`` 用户登录。"

#: ../../tutorial/tests.rst:363
msgid ""
"The ``index`` view should display information about the post that was "
"added with the test data. When logged in as the author, there should be a"
" link to edit the post."
msgstr ""
"``index`` 视图应该显示关于随测试数据添加的帖子的信息。当做为作者登录时，应该有一个编辑"
"帖子的链接。"

#: ../../tutorial/tests.rst:367
msgid ""
"You can also test some more authentication behavior while testing the "
"``index`` view. When not logged in, each page shows links to log in or "
"register. When logged in, there's a link to log out."
msgstr ""
"你也可以在测试 ``index`` 视图时测试更多的认证行为。当未登录时，每一个页面会"
"显示登录或注册链接。当登录后，会有一个链接用来登出。"

#: ../../tutorial/tests.rst:371 ../../tutorial/tests.rst:397
#: ../../tutorial/tests.rst:439 ../../tutorial/tests.rst:476
msgid "``tests/test_blog.py``"
msgstr "``tests/test_blog.py``"

#: ../../tutorial/tests.rst:391
msgid ""
"A user must be logged in to access the ``create``, ``update``, and "
"``delete`` views. The logged in user must be the author of the post to "
"access ``update`` and ``delete``, otherwise a ``403 Forbidden`` status is"
" returned. If a ``post`` with the given ``id`` doesn't exist, ``update`` "
"and ``delete`` should return ``404 Not Found``."
msgstr ""
"一个用户必须登录才能访问 ``create``、``update`` 和 ``delete`` 视图。登录的用户中，"
"必须是作者才可以访问 ``update`` 和 ``delete`` 视图，否则会返回一个 ``403 Forbidden`` "
"状态码。如果一个给定 ``id`` 的 ``post`` 不存在，``update`` 和 ``delete`` 视图应该返回 "
"``404 Not Found``。"

#: ../../tutorial/tests.rst:433
msgid ""
"The ``create`` and ``update`` views should render and return a ``200 OK``"
" status for a ``GET`` request. When valid data is sent in a ``POST`` "
"request, ``create`` should insert the new post data into the database, "
"and ``update`` should modify the existing data. Both pages should show an"
" error message on invalid data."
msgstr ""
"对于 ``GET`` 请求，``create`` 和 ``update`` 视图应该渲染并返回一个 ``200 OK`` 状"
"态码。当有效的数据通过一个 ``POST`` 请求发送，``create`` 应该插入新的数据到数据库中，"
"而且 ``update`` 应该修改现有的数据。对于非法数据，这两个页面都应该显示一个错误消息。"

#: ../../tutorial/tests.rst:473
msgid ""
"The ``delete`` view should redirect to the index URL and the post should "
"no longer exist in the database."
msgstr "``delete`` 视图应该重定向到索引 URL，并且帖子应该不再存在于数据库中。"

#: ../../tutorial/tests.rst:491
msgid "Running the Tests"
msgstr "运行测试"

#: ../../tutorial/tests.rst:493
msgid ""
"Some extra configuration, which is not required but makes running tests "
"with coverage less verbose, can be added to the project's ``setup.cfg`` "
"file."
msgstr ""
"有一些额外的配置可以添加到项目的 ``setup.cfg`` 文件。它们并不是必须的，但是可以简化运行"
"测试和计算覆盖率的命令，"

#: ../../tutorial/tests.rst:497
msgid "``setup.cfg``"
msgstr "``setup.cfg``"

#: ../../tutorial/tests.rst:508
msgid ""
"To run the tests, use the ``pytest`` command. It will find and run all "
"the test functions you've written."
msgstr ""
"使用 ``pytest`` 命令即可运行测试。它会寻找并运行你写的所有测试函数。"

#: ../../tutorial/tests.rst:527
msgid ""
"If any tests fail, pytest will show the error that was raised. You can "
"run ``pytest -v`` to get a list of each test function rather than dots."
msgstr ""
"如果有任何测试没有通过，pytest 会显示抛出的错误。你可以运行 ``pytest -v`` 来获取一个"
"包含每一个测试函数的列表，而不只是显示一串点。"

#: ../../tutorial/tests.rst:530
msgid ""
"To measure the code coverage of your tests, use the ``coverage`` command "
"to run pytest instead of running it directly."
msgstr ""
"为了测量测试的代码覆盖率，使用 ``coverage`` 命令来运行 pytest 而不是直接运行它。"

#: ../../tutorial/tests.rst:537
msgid "You can either view a simple coverage report in the terminal:"
msgstr "你可以在终端里查看一个简单的测试覆盖率报告："

#: ../../tutorial/tests.rst:552
msgid "An HTML report allows you to see which lines were covered in each file:"
msgstr "一个 HTML 报告允许你看到每一个文件里哪一行被覆盖到了："

#: ../../tutorial/tests.rst:558
msgid ""
"This generates files in the ``htmlcov`` directory. Open "
"``htmlcov/index.html`` in your browser to see the report."
msgstr ""
"这会生成文件到 ``htmlcov`` 目录。在浏览器打开 ``htmlcov/index.html``"
" 查看报告。"

#: ../../tutorial/tests.rst:561
msgid "Continue to :doc:`deploy`."
msgstr "继续阅读 :doc:`deploy`。"
