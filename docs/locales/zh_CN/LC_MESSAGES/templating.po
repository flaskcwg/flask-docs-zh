# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-25 19:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <withlihui@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../templating.rst:2
msgid "Templates"
msgstr ""

#: ../../templating.rst:4
msgid ""
"Flask leverages Jinja2 as its template engine.  You are obviously free to"
" use a different template engine, but you still have to install Jinja2 to"
" run Flask itself.  This requirement is necessary to enable rich "
"extensions. An extension can depend on Jinja2 being present."
msgstr ""

#: ../../templating.rst:9
msgid ""
"This section only gives a very quick introduction into how Jinja2 is "
"integrated into Flask.  If you want information on the template engine's "
"syntax itself, head over to the official `Jinja2 Template Documentation "
"<https://jinja.palletsprojects.com/templates/>`_ for more information."
msgstr ""

#: ../../templating.rst:16
msgid "Jinja Setup"
msgstr ""

#: ../../templating.rst:18
msgid "Unless customized, Jinja2 is configured by Flask as follows:"
msgstr ""

#: ../../templating.rst:20
msgid ""
"autoescaping is enabled for all templates ending in ``.html``, ``.htm``, "
"``.xml`` as well as ``.xhtml`` when using "
":func:`~flask.templating.render_template`."
msgstr ""

#: ../../templating.rst:23
msgid ""
"autoescaping is enabled for all strings when using "
":func:`~flask.templating.render_template_string`."
msgstr ""

#: ../../templating.rst:25
msgid ""
"a template has the ability to opt in/out autoescaping with the ``{% "
"autoescape %}`` tag."
msgstr ""

#: ../../templating.rst:27
msgid ""
"Flask inserts a couple of global functions and helpers into the Jinja2 "
"context, additionally to the values that are present by default."
msgstr ""

#: ../../templating.rst:32
msgid "Standard Context"
msgstr ""

#: ../../templating.rst:34
msgid ""
"The following global variables are available within Jinja2 templates by "
"default:"
msgstr ""

#: ../../templating.rst:40
msgid "The current configuration object (:data:`flask.config`)"
msgstr ""

#: ../../templating.rst:44
msgid "This is now always available, even in imported templates."
msgstr ""

#: ../../templating.rst:50
msgid ""
"The current request object (:class:`flask.request`).  This variable is "
"unavailable if the template was rendered without an active request "
"context."
msgstr ""

#: ../../templating.rst:57
msgid ""
"The current session object (:class:`flask.session`).  This variable is "
"unavailable if the template was rendered without an active request "
"context."
msgstr ""

#: ../../templating.rst:64
msgid ""
"The request-bound object for global variables (:data:`flask.g`).  This "
"variable is unavailable if the template was rendered without an active "
"request context."
msgstr ""

#: ../../templating.rst:71
msgid "The :func:`flask.url_for` function."
msgstr ""

#: ../../templating.rst:76
msgid "The :func:`flask.get_flashed_messages` function."
msgstr ""

#: ../../templating.rst:78
msgid "The Jinja Context Behavior"
msgstr ""

#: ../../templating.rst:80
msgid ""
"These variables are added to the context of variables, they are not "
"global variables.  The difference is that by default these will not show "
"up in the context of imported templates.  This is partially caused by "
"performance considerations, partially to keep things explicit."
msgstr ""

#: ../../templating.rst:85
msgid ""
"What does this mean for you?  If you have a macro you want to import, "
"that needs to access the request object you have two possibilities:"
msgstr ""

#: ../../templating.rst:88
msgid ""
"you explicitly pass the request to the macro as parameter, or the "
"attribute of the request object you are interested in."
msgstr ""

#: ../../templating.rst:90
msgid "you import the macro \"with context\"."
msgstr ""

#: ../../templating.rst:92
msgid "Importing with context looks like this:"
msgstr ""

#: ../../templating.rst:100
msgid "Controlling Autoescaping"
msgstr ""

#: ../../templating.rst:102
msgid ""
"Autoescaping is the concept of automatically escaping special characters "
"for you.  Special characters in the sense of HTML (or XML, and thus "
"XHTML) are ``&``, ``>``, ``<``, ``\"`` as well as ``'``.  Because these "
"characters carry specific meanings in documents on their own you have to "
"replace them by so called \"entities\" if you want to use them for text."
"  Not doing so would not only cause user frustration by the inability to "
"use these characters in text, but can also lead to security problems.  "
"(see :ref:`security-xss`)"
msgstr ""

#: ../../templating.rst:111
msgid ""
"Sometimes however you will need to disable autoescaping in templates. "
"This can be the case if you want to explicitly inject HTML into pages, "
"for example if they come from a system that generates secure HTML like a "
"markdown to HTML converter."
msgstr ""

#: ../../templating.rst:116
msgid "There are three ways to accomplish that:"
msgstr ""

#: ../../templating.rst:118
msgid ""
"In the Python code, wrap the HTML string in a :class:`~flask.Markup` "
"object before passing it to the template.  This is in general the "
"recommended way."
msgstr ""

#: ../../templating.rst:121
msgid ""
"Inside the template, use the ``|safe`` filter to explicitly mark a string"
" as safe HTML (``{{ myvariable|safe }}``)"
msgstr ""

#: ../../templating.rst:123
msgid "Temporarily disable the autoescape system altogether."
msgstr ""

#: ../../templating.rst:125
msgid ""
"To disable the autoescape system in templates, you can use the ``{% "
"autoescape %}`` block:"
msgstr ""

#: ../../templating.rst:135
msgid ""
"Whenever you do this, please be very cautious about the variables you are"
" using in this block."
msgstr ""

#: ../../templating.rst:141
msgid "Registering Filters"
msgstr ""

#: ../../templating.rst:143
msgid ""
"If you want to register your own filters in Jinja2 you have two ways to "
"do that.  You can either put them by hand into the "
":attr:`~flask.Flask.jinja_env` of the application or use the "
":meth:`~flask.Flask.template_filter` decorator."
msgstr ""

#: ../../templating.rst:148
msgid "The two following examples work the same and both reverse an object::"
msgstr ""

#: ../../templating.rst:158
msgid ""
"In case of the decorator the argument is optional if you want to use the "
"function name as name of the filter.  Once registered, you can use the "
"filter in your templates in the same way as Jinja2's builtin filters, for"
" example if you have a Python list in context called `mylist`::"
msgstr ""

#: ../../templating.rst:168
msgid "Context Processors"
msgstr ""

#: ../../templating.rst:170
msgid ""
"To inject new variables automatically into the context of a template, "
"context processors exist in Flask.  Context processors run before the "
"template is rendered and have the ability to inject new values into the "
"template context.  A context processor is a function that returns a "
"dictionary.  The keys and values of this dictionary are then merged with "
"the template context, for all templates in the app::"
msgstr ""

#: ../../templating.rst:181
msgid ""
"The context processor above makes a variable called `user` available in "
"the template with the value of `g.user`.  This example is not very "
"interesting because `g` is available in templates anyways, but it gives "
"an idea how this works."
msgstr ""

#: ../../templating.rst:186
msgid ""
"Variables are not limited to values; a context processor can also make "
"functions available to templates (since Python allows passing around "
"functions)::"
msgstr ""

#: ../../templating.rst:196
msgid ""
"The context processor above makes the `format_price` function available "
"to all templates::"
msgstr ""

#: ../../templating.rst:201
msgid ""
"You could also build `format_price` as a template filter (see :ref"
":`registering-filters`), but this demonstrates how to pass functions in a"
" context processor."
msgstr ""
