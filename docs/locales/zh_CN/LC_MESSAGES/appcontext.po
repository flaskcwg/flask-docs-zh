# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-25 19:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <withlihui@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../appcontext.rst:4
msgid "The Application Context"
msgstr ""

#: ../../appcontext.rst:6
msgid ""
"The application context keeps track of the application-level data during "
"a request, CLI command, or other activity. Rather than passing the "
"application around to each function, the :data:`current_app` and "
":data:`g` proxies are accessed instead."
msgstr ""

#: ../../appcontext.rst:11
msgid ""
"This is similar to the :doc:`/reqcontext`, which keeps track of request-"
"level data during a request. A corresponding application context is "
"pushed when a request context is pushed."
msgstr ""

#: ../../appcontext.rst:16
msgid "Purpose of the Context"
msgstr ""

#: ../../appcontext.rst:18
msgid ""
"The :class:`Flask` application object has attributes, such as "
":attr:`~Flask.config`, that are useful to access within views and "
":doc:`CLI commands </cli>`. However, importing the ``app`` instance "
"within the modules in your project is prone to circular import issues. "
"When using the :doc:`app factory pattern </patterns/appfactories>` or "
"writing reusable :doc:`blueprints </blueprints>` or :doc:`extensions "
"</extensions>` there won't be an ``app`` instance to import at all."
msgstr ""

#: ../../appcontext.rst:27
msgid ""
"Flask solves this issue with the *application context*. Rather than "
"referring to an ``app`` directly, you use the :data:`current_app` proxy, "
"which points to the application handling the current activity."
msgstr ""

#: ../../appcontext.rst:31
msgid ""
"Flask automatically *pushes* an application context when handling a "
"request. View functions, error handlers, and other functions that run "
"during a request will have access to :data:`current_app`."
msgstr ""

#: ../../appcontext.rst:35
msgid ""
"Flask will also automatically push an app context when running CLI "
"commands registered with :attr:`Flask.cli` using ``@app.cli.command()``."
msgstr ""

#: ../../appcontext.rst:40
msgid "Lifetime of the Context"
msgstr ""

#: ../../appcontext.rst:42
msgid ""
"The application context is created and destroyed as necessary. When a "
"Flask application begins handling a request, it pushes an application "
"context and a :doc:`request context </reqcontext>`. When the request ends"
" it pops the request context then the application context. Typically, an "
"application context will have the same lifetime as a request."
msgstr ""

#: ../../appcontext.rst:49
msgid ""
"See :doc:`/reqcontext` for more information about how the contexts work "
"and the full life cycle of a request."
msgstr ""

#: ../../appcontext.rst:54
msgid "Manually Push a Context"
msgstr ""

#: ../../appcontext.rst:56
msgid ""
"If you try to access :data:`current_app`, or anything that uses it, "
"outside an application context, you'll get this error message:"
msgstr ""

#: ../../appcontext.rst:67
msgid ""
"If you see that error while configuring your application, such as when "
"initializing an extension, you can push a context manually since you have"
" direct access to the ``app``. Use :meth:`~Flask.app_context` in a "
"``with`` block, and everything that runs in the block will have access to"
" :data:`current_app`. ::"
msgstr ""

#: ../../appcontext.rst:81
msgid ""
"If you see that error somewhere else in your code not related to "
"configuring the application, it most likely indicates that you should "
"move that code into a view function or CLI command."
msgstr ""

#: ../../appcontext.rst:87
msgid "Storing Data"
msgstr ""

#: ../../appcontext.rst:89
msgid ""
"The application context is a good place to store common data during a "
"request or CLI command. Flask provides the :data:`g object <g>` for this "
"purpose. It is a simple namespace object that has the same lifetime as an"
" application context."
msgstr ""

#: ../../appcontext.rst:95
msgid ""
"The ``g`` name stands for \"global\", but that is referring to the data "
"being global *within a context*. The data on ``g`` is lost after the "
"context ends, and it is not an appropriate place to store data between "
"requests. Use the :data:`session` or a database to store data across "
"requests."
msgstr ""

#: ../../appcontext.rst:101
msgid "A common use for :data:`g` is to manage resources during a request."
msgstr ""

#: ../../appcontext.rst:103
msgid ""
"``get_X()`` creates resource ``X`` if it does not exist, caching it as "
"``g.X``."
msgstr ""

#: ../../appcontext.rst:105
msgid ""
"``teardown_X()`` closes or otherwise deallocates the resource if it "
"exists. It is registered as a :meth:`~Flask.teardown_appcontext` handler."
msgstr ""

#: ../../appcontext.rst:109
msgid "For example, you can manage a database connection using this pattern::"
msgstr ""

#: ../../appcontext.rst:126
msgid ""
"During a request, every call to ``get_db()`` will return the same "
"connection, and it will be closed automatically at the end of the "
"request."
msgstr ""

#: ../../appcontext.rst:130
msgid ""
"You can use :class:`~werkzeug.local.LocalProxy` to make a new context "
"local from ``get_db()``::"
msgstr ""

#: ../../appcontext.rst:136
msgid ""
"Accessing ``db`` will call ``get_db`` internally, in the same way that "
":data:`current_app` works."
msgstr ""

#: ../../appcontext.rst:141
msgid ""
"If you're writing an extension, :data:`g` should be reserved for user "
"code. You may store internal data on the context itself, but be sure to "
"use a sufficiently unique name. The current context is accessed with "
":data:`_app_ctx_stack.top <_app_ctx_stack>`. For more information see "
":doc:`/extensiondev`."
msgstr ""

#: ../../appcontext.rst:149
msgid "Events and Signals"
msgstr ""

#: ../../appcontext.rst:151
msgid ""
"The application will call functions registered with "
":meth:`~Flask.teardown_appcontext` when the application context is "
"popped."
msgstr ""

#: ../../appcontext.rst:155
msgid ""
"If :data:`~signals.signals_available` is true, the following signals are "
"sent: :data:`appcontext_pushed`, :data:`appcontext_tearing_down`, and "
":data:`appcontext_popped`."
msgstr ""
