# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-25 19:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <withlihui@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../shell.rst:2
msgid "Working with the Shell"
msgstr ""

#: ../../shell.rst:6
msgid ""
"One of the reasons everybody loves Python is the interactive shell.  It "
"basically allows you to execute Python commands in real time and "
"immediately get results back.  Flask itself does not come with an "
"interactive shell, because it does not require any specific setup "
"upfront, just import your application and start playing around."
msgstr ""

#: ../../shell.rst:12
msgid ""
"There are however some handy helpers to make playing around in the shell "
"a more pleasant experience.  The main issue with interactive console "
"sessions is that you're not triggering a request like a browser does "
"which means that :data:`~flask.g`, :data:`~flask.request` and others are "
"not available.  But the code you want to test might depend on them, so "
"what can you do?"
msgstr ""

#: ../../shell.rst:19
msgid ""
"This is where some helper functions come in handy.  Keep in mind however "
"that these functions are not only there for interactive shell usage, but "
"also for unit testing and other situations that require a faked request "
"context."
msgstr ""

#: ../../shell.rst:24
msgid ""
"Generally it's recommended that you read the :doc:`reqcontext` chapter of"
" the documentation first."
msgstr ""

#: ../../shell.rst:28
msgid "Command Line Interface"
msgstr ""

#: ../../shell.rst:30
msgid ""
"Starting with Flask 0.11 the recommended way to work with the shell is "
"the ``flask shell`` command which does a lot of this automatically for "
"you. For instance the shell is automatically initialized with a loaded "
"application context."
msgstr ""

#: ../../shell.rst:35
msgid "For more information see :doc:`/cli`."
msgstr ""

#: ../../shell.rst:38
msgid "Creating a Request Context"
msgstr ""

#: ../../shell.rst:40
msgid ""
"The easiest way to create a proper request context from the shell is by "
"using the :attr:`~flask.Flask.test_request_context` method which creates "
"us a :class:`~flask.ctx.RequestContext`:"
msgstr ""

#: ../../shell.rst:46
msgid ""
"Normally you would use the ``with`` statement to make this request object"
" active, but in the shell it's easier to use the "
":meth:`~flask.ctx.RequestContext.push` and "
":meth:`~flask.ctx.RequestContext.pop` methods by hand:"
msgstr ""

#: ../../shell.rst:53
msgid ""
"From that point onwards you can work with the request object until you "
"call `pop`:"
msgstr ""

#: ../../shell.rst:59
msgid "Firing Before/After Request"
msgstr ""

#: ../../shell.rst:61
msgid ""
"By just creating a request context, you still don't have run the code "
"that is normally run before a request.  This might result in your "
"database being unavailable if you are connecting to the database in a "
"before-request callback or the current user not being stored on the "
":data:`~flask.g` object etc."
msgstr ""

#: ../../shell.rst:67
msgid ""
"This however can easily be done yourself.  Just call "
":meth:`~flask.Flask.preprocess_request`:"
msgstr ""

#: ../../shell.rst:74
msgid ""
"Keep in mind that the :meth:`~flask.Flask.preprocess_request` function "
"might return a response object, in that case just ignore it."
msgstr ""

#: ../../shell.rst:77
msgid ""
"To shutdown a request, you need to trick a bit before the after request "
"functions (triggered by :meth:`~flask.Flask.process_response`) operate on"
" a response object:"
msgstr ""

#: ../../shell.rst:85
msgid ""
"The functions registered as :meth:`~flask.Flask.teardown_request` are "
"automatically called when the context is popped.  So this is the perfect "
"place to automatically tear down resources that were needed by the "
"request context (such as database connections)."
msgstr ""

#: ../../shell.rst:92
msgid "Further Improving the Shell Experience"
msgstr ""

#: ../../shell.rst:94
msgid ""
"If you like the idea of experimenting in a shell, create yourself a "
"module with stuff you want to star import into your interactive session."
"  There you could also define some more helper methods for common things "
"such as initializing the database, dropping tables etc."
msgstr ""

#: ../../shell.rst:99
msgid "Just put them into a module (like `shelltools`) and import from there:"
msgstr ""
