# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-25 19:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <withlihui@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../patterns/lazyloading.rst:2
msgid "Lazily Loading Views"
msgstr ""

#: ../../patterns/lazyloading.rst:4
msgid ""
"Flask is usually used with the decorators.  Decorators are simple and you"
" have the URL right next to the function that is called for that specific"
" URL.  However there is a downside to this approach: it means all your "
"code that uses decorators has to be imported upfront or Flask will never "
"actually find your function."
msgstr ""

#: ../../patterns/lazyloading.rst:10
msgid ""
"This can be a problem if your application has to import quick.  It might "
"have to do that on systems like Google's App Engine or other systems.  So"
" if you suddenly notice that your application outgrows this approach you "
"can fall back to a centralized URL mapping."
msgstr ""

#: ../../patterns/lazyloading.rst:15
msgid ""
"The system that enables having a central URL map is the "
":meth:`~flask.Flask.add_url_rule` function.  Instead of using decorators,"
" you have a file that sets up the application with all URLs."
msgstr ""

#: ../../patterns/lazyloading.rst:20
msgid "Converting to Centralized URL Map"
msgstr ""

#: ../../patterns/lazyloading.rst:22
msgid "Imagine the current application looks somewhat like this::"
msgstr ""

#: ../../patterns/lazyloading.rst:35
msgid ""
"Then, with the centralized approach you would have one file with the "
"views (:file:`views.py`) but without any decorator::"
msgstr ""

#: ../../patterns/lazyloading.rst:44
msgid ""
"And then a file that sets up an application which maps the functions to "
"URLs::"
msgstr ""

#: ../../patterns/lazyloading.rst:54
msgid "Loading Late"
msgstr ""

#: ../../patterns/lazyloading.rst:56
msgid ""
"So far we only split up the views and the routing, but the module is "
"still loaded upfront.  The trick is to actually load the view function as"
" needed. This can be accomplished with a helper class that behaves just "
"like a function but internally imports the real function on first use::"
msgstr ""

#: ../../patterns/lazyloading.rst:76
msgid ""
"What's important here is is that `__module__` and `__name__` are properly"
" set.  This is used by Flask internally to figure out how to name the URL"
" rules in case you don't provide a name for the rule yourself."
msgstr ""

#: ../../patterns/lazyloading.rst:80
msgid "Then you can define your central place to combine the views like this::"
msgstr ""

#: ../../patterns/lazyloading.rst:90
msgid ""
"You can further optimize this in terms of amount of keystrokes needed to "
"write this by having a function that calls into "
":meth:`~flask.Flask.add_url_rule` by prefixing a string with the project "
"name and a dot, and by wrapping `view_func` in a `LazyView` as needed.  "
"::"
msgstr ""

#: ../../patterns/lazyloading.rst:107
msgid ""
"One thing to keep in mind is that before and after request handlers have "
"to be in a file that is imported upfront to work properly on the first "
"request.  The same goes for any kind of remaining decorator."
msgstr ""
