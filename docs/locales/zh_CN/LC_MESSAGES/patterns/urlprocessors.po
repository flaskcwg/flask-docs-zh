# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-25 19:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <withlihui@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../patterns/urlprocessors.rst:2
msgid "Using URL Processors"
msgstr ""

#: ../../patterns/urlprocessors.rst:6
msgid ""
"Flask 0.7 introduces the concept of URL processors.  The idea is that you"
" might have a bunch of resources with common parts in the URL that you "
"don't always explicitly want to provide.  For instance you might have a "
"bunch of URLs that have the language code in it but you don't want to "
"have to handle it in every single function yourself."
msgstr ""

#: ../../patterns/urlprocessors.rst:12
msgid ""
"URL processors are especially helpful when combined with blueprints.  We "
"will handle both application specific URL processors here as well as "
"blueprint specifics."
msgstr ""

#: ../../patterns/urlprocessors.rst:17
msgid "Internationalized Application URLs"
msgstr ""

#: ../../patterns/urlprocessors.rst:19
msgid "Consider an application like this::"
msgstr ""

#: ../../patterns/urlprocessors.rst:35
msgid ""
"This is an awful lot of repetition as you have to handle the language "
"code setting on the :data:`~flask.g` object yourself in every single "
"function. Sure, a decorator could be used to simplify this, but if you "
"want to generate URLs from one function to another you would have to "
"still provide the language code explicitly which can be annoying."
msgstr ""

#: ../../patterns/urlprocessors.rst:41
msgid ""
"For the latter, this is where :func:`~flask.Flask.url_defaults` functions"
" come in.  They can automatically inject values into a call to "
":func:`~flask.url_for`.  The code below checks if the language code is "
"not yet in the dictionary of URL values and if the endpoint wants a value"
" named ``'lang_code'``::"
msgstr ""

#: ../../patterns/urlprocessors.rst:54
msgid ""
"The method :meth:`~werkzeug.routing.Map.is_endpoint_expecting` of the URL"
" map can be used to figure out if it would make sense to provide a "
"language code for the given endpoint."
msgstr ""

#: ../../patterns/urlprocessors.rst:58
msgid ""
"The reverse of that function are "
":meth:`~flask.Flask.url_value_preprocessor`\\s.  They are executed right "
"after the request was matched and can execute code based on the URL "
"values.  The idea is that they pull information out of the values "
"dictionary and put it somewhere else::"
msgstr ""

#: ../../patterns/urlprocessors.rst:68
msgid ""
"That way you no longer have to do the `lang_code` assignment to "
":data:`~flask.g` in every function.  You can further improve that by "
"writing your own decorator that prefixes URLs with the language code, but"
" the more beautiful solution is using a blueprint.  Once the "
"``'lang_code'`` is popped from the values dictionary and it will no "
"longer be forwarded to the view function reducing the code to this::"
msgstr ""

#: ../../patterns/urlprocessors.rst:99
msgid "Internationalized Blueprint URLs"
msgstr ""

#: ../../patterns/urlprocessors.rst:101
msgid ""
"Because blueprints can automatically prefix all URLs with a common string"
" it's easy to automatically do that for every function.  Furthermore "
"blueprints can have per-blueprint URL processors which removes a whole "
"lot of logic from the :meth:`~flask.Flask.url_defaults` function because "
"it no longer has to check if the URL is really interested in a "
"``'lang_code'`` parameter::"
msgstr ""
