# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-25 19:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <withlihui@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../patterns/viewdecorators.rst:2
msgid "View Decorators"
msgstr ""

#: ../../patterns/viewdecorators.rst:4
msgid ""
"Python has a really interesting feature called function decorators.  This"
" allows some really neat things for web applications.  Because each view "
"in Flask is a function, decorators can be used to inject additional "
"functionality to one or more functions.  The :meth:`~flask.Flask.route` "
"decorator is the one you probably used already.  But there are use cases "
"for implementing your own decorator.  For instance, imagine you have a "
"view that should only be used by people that are logged in.  If a user "
"goes to the site and is not logged in, they should be redirected to the "
"login page.  This is a good example of a use case where a decorator is an"
" excellent solution."
msgstr ""

#: ../../patterns/viewdecorators.rst:16
msgid "Login Required Decorator"
msgstr ""

#: ../../patterns/viewdecorators.rst:18
msgid ""
"So let's implement such a decorator.  A decorator is a function that "
"wraps and replaces another function.  Since the original function is "
"replaced, you need to remember to copy the original function's "
"information to the new function.  Use :func:`functools.wraps` to handle "
"this for you."
msgstr ""

#: ../../patterns/viewdecorators.rst:23
msgid ""
"This example assumes that the login page is called ``'login'`` and that "
"the current user is stored in ``g.user`` and is ``None`` if there is no-"
"one logged in. ::"
msgstr ""

#: ../../patterns/viewdecorators.rst:38
msgid ""
"To use the decorator, apply it as innermost decorator to a view function."
" When applying further decorators, always remember that the "
":meth:`~flask.Flask.route` decorator is the outermost. ::"
msgstr ""

#: ../../patterns/viewdecorators.rst:48
msgid ""
"The ``next`` value will exist in ``request.args`` after a ``GET`` request"
" for the login page.  You'll have to pass it along when sending the "
"``POST`` request from the login form.  You can do this with a hidden "
"input tag, then retrieve it from ``request.form`` when logging the user "
"in. ::"
msgstr ""

#: ../../patterns/viewdecorators.rst:57
msgid "Caching Decorator"
msgstr ""

#: ../../patterns/viewdecorators.rst:59
msgid ""
"Imagine you have a view function that does an expensive calculation and "
"because of that you would like to cache the generated results for a "
"certain amount of time.  A decorator would be nice for that.  We're "
"assuming you have set up a cache like mentioned in :doc:`caching`."
msgstr ""

#: ../../patterns/viewdecorators.rst:64
msgid ""
"Here is an example cache function.  It generates the cache key from a "
"specific prefix (actually a format string) and the current path of the "
"request.  Notice that we are using a function that first creates the "
"decorator that then decorates the function.  Sounds awful? Unfortunately "
"it is a little bit more complex, but the code should still be "
"straightforward to read."
msgstr ""

#: ../../patterns/viewdecorators.rst:71
msgid "The decorated function will then work as follows"
msgstr ""

#: ../../patterns/viewdecorators.rst:73
msgid ""
"get the unique cache key for the current request based on the current "
"path."
msgstr ""

#: ../../patterns/viewdecorators.rst:75
msgid ""
"get the value for that key from the cache. If the cache returned "
"something we will return that value."
msgstr ""

#: ../../patterns/viewdecorators.rst:77
msgid ""
"otherwise the original function is called and the return value is stored "
"in the cache for the timeout provided (by default 5 minutes)."
msgstr ""

#: ../../patterns/viewdecorators.rst:80
msgid "Here the code::"
msgstr ""

#: ../../patterns/viewdecorators.rst:99
msgid ""
"Notice that this assumes an instantiated ``cache`` object is available, "
"see :doc:`caching`."
msgstr ""

#: ../../patterns/viewdecorators.rst:104
msgid "Templating Decorator"
msgstr ""

#: ../../patterns/viewdecorators.rst:106
msgid ""
"A common pattern invented by the TurboGears guys a while back is a "
"templating decorator.  The idea of that decorator is that you return a "
"dictionary with the values passed to the template from the view function "
"and the template is automatically rendered.  With that, the following "
"three examples do exactly the same::"
msgstr ""

#: ../../patterns/viewdecorators.rst:126
msgid ""
"As you can see, if no template name is provided it will use the endpoint "
"of the URL map with dots converted to slashes + ``'.html'``.  Otherwise "
"the provided template name is used.  When the decorated function returns,"
" the dictionary returned is passed to the template rendering function.  "
"If ``None`` is returned, an empty dictionary is assumed, if something "
"else than a dictionary is returned we return it from the function "
"unchanged.  That way you can still use the redirect function or return "
"simple strings."
msgstr ""

#: ../../patterns/viewdecorators.rst:134
msgid "Here is the code for that decorator::"
msgstr ""

#: ../../patterns/viewdecorators.rst:157
msgid "Endpoint Decorator"
msgstr ""

#: ../../patterns/viewdecorators.rst:159
msgid ""
"When you want to use the werkzeug routing system for more flexibility you"
" need to map the endpoint as defined in the "
":class:`~werkzeug.routing.Rule` to a view function. This is possible with"
" this decorator. For example::"
msgstr ""
