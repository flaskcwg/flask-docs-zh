# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-12 19:17+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <withlihui@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../async-await.rst:4
msgid "Using ``async`` and ``await``"
msgstr ""

#: ../../async-await.rst:8
msgid ""
"Routes, error handlers, before request, after request, and teardown "
"functions can all be coroutine functions if Flask is installed with the "
"``async`` extra (``pip install flask[async]``). It requires Python 3.7+ "
"where ``contextvars.ContextVar`` is available. This allows views to be "
"defined with ``async def`` and use ``await``."
msgstr ""

#: ../../async-await.rst:21
msgid ""
"Pluggable class-based views also support handlers that are implemented as"
" coroutines. This applies to the "
":meth:`~flask.views.View.dispatch_request` method in views that inherit "
"from the :class:`flask.views.View` class, as well as all the HTTP method "
"handlers in views that inherit from the :class:`flask.views.MethodView` "
"class."
msgstr ""

#: ../../async-await.rst:27
msgid "Using ``async`` on Windows on Python 3.8"
msgstr ""

#: ../../async-await.rst:29
msgid ""
"Python 3.8 has a bug related to asyncio on Windows. If you encounter "
"something like ``ValueError: set_wakeup_fd only works in main thread``, "
"please upgrade to Python 3.9."
msgstr ""

#: ../../async-await.rst:35
msgid "Performance"
msgstr ""

#: ../../async-await.rst:37
msgid ""
"Async functions require an event loop to run. Flask, as a WSGI "
"application, uses one worker to handle one request/response cycle. When a"
" request comes in to an async view, Flask will start an event loop in a "
"thread, run the view function there, then return the result."
msgstr ""

#: ../../async-await.rst:42
msgid ""
"Each request still ties up one worker, even for async views. The upside "
"is that you can run async code within a view, for example to make "
"multiple concurrent database queries, HTTP requests to an external API, "
"etc. However, the number of requests your application can handle at one "
"time will remain the same."
msgstr ""

#: ../../async-await.rst:48
msgid ""
"**Async is not inherently faster than sync code.** Async is beneficial "
"when performing concurrent IO-bound tasks, but will probably not improve "
"CPU-bound tasks. Traditional Flask views will still be appropriate for "
"most use cases, but Flask's async support enables writing and using code "
"that wasn't possible natively before."
msgstr ""

#: ../../async-await.rst:56
msgid "Background tasks"
msgstr ""

#: ../../async-await.rst:58
msgid ""
"Async functions will run in an event loop until they complete, at which "
"stage the event loop will stop. This means any additional spawned tasks "
"that haven't completed when the async function completes will be "
"cancelled. Therefore you cannot spawn background tasks, for example via "
"``asyncio.create_task``."
msgstr ""

#: ../../async-await.rst:64
msgid ""
"If you wish to use background tasks it is best to use a task queue to "
"trigger background work, rather than spawn tasks in a view function. With"
" that in mind you can spawn asyncio tasks by serving Flask with an ASGI "
"server and utilising the asgiref WsgiToAsgi adapter as described in "
":ref:`asgi`. This works as the adapter creates an event loop that runs "
"continually."
msgstr ""

#: ../../async-await.rst:73
msgid "When to use Quart instead"
msgstr ""

#: ../../async-await.rst:75
msgid ""
"Flask's async support is less performant than async-first frameworks due "
"to the way it is implemented. If you have a mainly async codebase it "
"would make sense to consider `Quart`_. Quart is a reimplementation of "
"Flask based on the `ASGI`_ standard instead of WSGI. This allows it to "
"handle many concurrent requests, long running requests, and websockets "
"without requiring multiple worker processes or threads."
msgstr ""

#: ../../async-await.rst:82
msgid ""
"It has also already been possible to run Flask with Gevent or Eventlet to"
" get many of the benefits of async request handling. These libraries "
"patch low-level Python functions to accomplish this, whereas ``async``/ "
"``await`` and ASGI use standard, modern Python capabilities. Deciding "
"whether you should use Flask, Quart, or something else is ultimately up "
"to understanding the specific needs of your project."
msgstr ""

#: ../../async-await.rst:94
msgid "Extensions"
msgstr ""

#: ../../async-await.rst:96
msgid ""
"Flask extensions predating Flask's async support do not expect async "
"views. If they provide decorators to add functionality to views, those "
"will probably not work with async views because they will not await the "
"function or be awaitable. Other functions they provide will not be "
"awaitable either and will probably be blocking if called within an async "
"view."
msgstr ""

#: ../../async-await.rst:102
msgid ""
"Extension authors can support async functions by utilising the "
":meth:`flask.Flask.ensure_sync` method. For example, if the extension "
"provides a view function decorator add ``ensure_sync`` before calling the"
" decorated function,"
msgstr ""

#: ../../async-await.rst:117
msgid ""
"Check the changelog of the extension you want to use to see if they've "
"implemented async support, or make a feature request or PR to them."
msgstr ""

#: ../../async-await.rst:122
msgid "Other event loops"
msgstr ""

#: ../../async-await.rst:124
msgid ""
"At the moment Flask only supports :mod:`asyncio`. It's possible to "
"override :meth:`flask.Flask.ensure_sync` to change how async functions "
"are wrapped to use a different library."
msgstr ""

#~ msgid ""
#~ "Routes, error handlers, before request, "
#~ "after request, and teardown functions "
#~ "can all be coroutine functions if "
#~ "Flask is installed with the ``async``"
#~ " extra (``pip install flask[async]``). This"
#~ " allows views to be defined with "
#~ "``async def`` and use ``await``."
#~ msgstr ""
